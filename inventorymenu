-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Decompiler will be improved VERY SOON!
-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/brNTY8nX8t)
-- Decompiled on 2025-10-04 11:46:37
-- Luau version 6, Types version 3
-- Time taken: 0.057739 seconds

-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
local References_upvr = require(game:GetService("ReplicatedStorage").References)
local Utilities_upvr = References_upvr.Utilities
local Services_upvr = References_upvr.Services
local Data_upvr = require(References_upvr.PlayerScripts.Priority.Data)
local InventoryHandler_upvr = require(References_upvr.PlayerScripts.Priority.InventoryHandler)
local module = require(References_upvr.PlayerScripts.Secondary:WaitForChild("MenuHandler"))
local module_2_upvr = require(References_upvr.PlayerScripts.Secondary:WaitForChild("ItemInfoMenuHandler"))
local module_upvr_3 = require(References_upvr.PlayerScripts.Secondary:WaitForChild("AlertHandler"))
local module_upvr_2 = require(References_upvr.PlayerScripts.Secondary:WaitForChild("GetInventoryItemInfoOptions"))
local module_upvr = require(References_upvr.PlayerScripts.Secondary:WaitForChild("StorageLockerHandler"))
local frame = module.menus.Backpack.frame
local Backpack_upvr = module.menus.Backpack
local Inventory_upvr = frame:WaitForChild("Main"):WaitForChild("Inventory")
local Bottom = Inventory_upvr:WaitForChild("Content"):WaitForChild("Bottom")
local Standard_upvr = Bottom:WaitForChild("Bottom"):WaitForChild("Standard")
local Selection_upvr = Bottom:WaitForChild("Bottom"):WaitForChild("Selection")
local Search_upvr = Bottom:WaitForChild("Top"):WaitForChild("Search")
local Toggle = Standard_upvr:WaitForChild("LockedAtTop"):WaitForChild("Toggle")
local any_GetLocal_result1_3_upvw = Data_upvr.GetLocal({"settings", "Locked At Top"})
if any_GetLocal_result1_3_upvw == nil then
	any_GetLocal_result1_3_upvw = References_upvr.Settings["Locked At Top"].default
end
local BindableEvent_upvr = Instance.new("BindableEvent")
local var38_upvw
local module_upvr_7 = {
	ItemSelected = BindableEvent_upvr.Event;
	listed = {};
}
local function SortByItemValue(arg1) -- Line 57
	--[[ Upvalues[1]:
		[1]: Utilities_upvr (readonly)
	]]
	return -(Utilities_upvr.GetItemValue(arg1, 1) or 0), "Value"
end
local function SortByTotalValue(arg1) -- Line 62
	--[[ Upvalues[1]:
		[1]: Utilities_upvr (readonly)
	]]
	return -(Utilities_upvr.GetItemValue(arg1, arg1.amt) or 0), "Total Value"
end
local function SortAnimalByNewest_upvr(arg1) -- Line 72, Named "SortAnimalByNewest"
	return -(arg1.madeAt or 1), "Newest"
end
local function SortAnimalByStats_upvr(arg1) -- Line 77, Named "SortAnimalByStats"
	--[[ Upvalues[2]:
		[1]: Utilities_upvr (readonly)
		[2]: References_upvr (readonly)
	]]
	local var42 = 0
	local var43
	if not var43 then
		var43 = {}
	end
	for i in pairs(References_upvr.AnimalStats) do
		var42 += var43[i] or 0
	end
	return -var42, "Stats"
end
local function SortTackByTypeOrder(arg1) -- Line 127
	--[[ Upvalues[2]:
		[1]: References_upvr (readonly)
		[2]: Utilities_upvr (readonly)
	]]
	local any_GetInfo_result1_5 = References_upvr.Items.GetInfo(arg1.id)
	local var55
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var55 = References_upvr.TackTypes[any_GetInfo_result1_5.tackType].order * 1000000
		return var55
	end
	if not any_GetInfo_result1_5.tackType or not INLINED_2() then
		var55 = 0
	end
	var55 -= Utilities_upvr.GetItemValue(arg1, 1) or 0
	return var55, "Type"
end
local function SortTackByEquipped(arg1) -- Line 134
	--[[ Upvalues[3]:
		[1]: Data_upvr (readonly)
		[2]: References_upvr (readonly)
		[3]: Utilities_upvr (readonly)
	]]
	local var56 = false
	local var57
	if arg1.onAnimal ~= nil then
		local tbl_6 = {}
		var57 = "inventory"
		tbl_6[1] = var57
		tbl_6[2] = arg1.onAnimal
		if Data_upvr.GetLocal(tbl_6) == nil then
			var56 = false
		else
			var56 = true
		end
	end
	var57 = References_upvr.Items
	var57 = arg1.id
	local any_GetInfo_result1_7 = var57.GetInfo(var57)
	local function INLINED_3() -- Internal function, doesn't exist in bytecode
		var57 = References_upvr.TackTypes[any_GetInfo_result1_7.tackType].order * 1000000
		return var57
	end
	if not any_GetInfo_result1_7.tackType or not INLINED_3() then
		var57 = 0
	end
	var57 -= Utilities_upvr.GetItemValue(arg1, 1) or 0
	local var60 = var57
	if var56 then
		var60 -= 100000000
	end
	var57 = "Equipped"
	return var60, var57
end
local function SortTackByUnequipped(arg1) -- Line 143
	--[[ Upvalues[3]:
		[1]: Data_upvr (readonly)
		[2]: References_upvr (readonly)
		[3]: Utilities_upvr (readonly)
	]]
	local var61 = false
	local var62
	if arg1.onAnimal ~= nil then
		local tbl_2 = {}
		var62 = "inventory"
		tbl_2[1] = var62
		tbl_2[2] = arg1.onAnimal
		if Data_upvr.GetLocal(tbl_2) == nil then
			var61 = false
		else
			var61 = true
		end
	end
	var62 = References_upvr.Items
	var62 = arg1.id
	local any_GetInfo_result1 = var62.GetInfo(var62)
	local function INLINED_4() -- Internal function, doesn't exist in bytecode
		var62 = References_upvr.TackTypes[any_GetInfo_result1.tackType].order * 1000000
		return var62
	end
	if not any_GetInfo_result1.tackType or not INLINED_4() then
		var62 = 0
	end
	var62 -= Utilities_upvr.GetItemValue(arg1, 1) or 0
	local var65 = var62
	if var61 then
		var65 += 100000000
	end
	var62 = "Unequipped"
	return var65, var62
end
local function SortAnimalByBreed_upvr(arg1) -- Line 152, Named "SortAnimalByBreed"
	--[[ Upvalues[1]:
		[1]: References_upvr (readonly)
	]]
	local any_GetInfo_result1_3 = References_upvr.Items.GetInfo(arg1.id)
	local var67
	local function INLINED_5() -- Internal function, doesn't exist in bytecode
		var67 = any_GetInfo_result1_3.breedName
		return var67
	end
	if not any_GetInfo_result1_3 or not INLINED_5() then
		var67 = 'a'
	end
	return var67:byte() * 10000 + var67:len() * var67:byte(1, var67:len()), "Breed"
end
local tbl_11_upvr = {{"Value (Each)", SortByItemValue}}
local function Sort_upvr(arg1, arg2) -- Line 216, Named "Sort"
	--[[ Upvalues[3]:
		[1]: module_upvr_7 (readonly)
		[2]: tbl_11_upvr (readonly)
		[3]: any_GetLocal_result1_3_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var100 = module_upvr_7.categories[arg1]
	local var101
	if not var101 then
		var101 = tbl_11_upvr
	end
	if not arg2 then
		if #var101 < (var100.sortIndex or 0) + 1 then
			local var102 = 1
		end
	end
	local var103 = var101[var102]
	if not var103 then
		var103 = var101[1]
	end
	if var103 then
		var100.sortFunc = var103[2]
		var100.sortIndex = var102
		for _, v in ipairs(var100.items) do
			local var108 = module_upvr_7.listed[v]
			if var108 then
				local var109
				if any_GetLocal_result1_3_upvw and var108.data.invLock then
					var109 -= 9999999999
				end
				var108.frame.LayoutOrder = var109
			end
		end
		var100.frame.Header.Sort.SortLabel.Text = "Sort - %s":format(var103[1])
	end
end
local function _() -- Line 248, Named "SortAll"
	--[[ Upvalues[2]:
		[1]: module_upvr_7 (readonly)
		[2]: Sort_upvr (readonly)
	]]
	for i_3, v_2 in module_upvr_7.categories do
		Sort_upvr(i_3, v_2.sortIndex)
	end
end
local tbl_10 = {
	Animals = {
		displayName = "Horses";
		icon = References_upvr.Assets.images.horseHead;
		order = 1;
		sortOptions = {{"Stats", SortAnimalByStats_upvr}, {"Personality", function(arg1) -- Line 96, Named "SortAnimalByPersonality"
			return arg1.pId or 1, "Personality"
		end}, {"Height", function(arg1) -- Line 87, Named "SortAnimalBySize"
			--[[ Upvalues[2]:
				[1]: SortAnimalByNewest_upvr (readonly)
				[2]: Utilities_upvr (readonly)
			]]
			if arg1.baby then
				return SortAnimalByNewest_upvr(arg1)
			end
			local _, any_GetHeight_result2, _ = Utilities_upvr.GetHeight(arg1)
			return any_GetHeight_result2 * 100
		end}, {"Colour", function(arg1) -- Line 171, Named "SortAnimalByColour"
			--[[ Upvalues[1]:
				[1]: References_upvr (readonly)
			]]
			-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
			local any_GetInfo_result1_2 = References_upvr.Items.GetInfo(arg1.id)
			local var70
			local function INLINED_6() -- Internal function, doesn't exist in bytecode
				var70 = arg1.variants.colour
				return var70
			end
			if not arg1.variants or not INLINED_6() then
				var70 = 'a'
			end
			if not any_GetInfo_result1_2 or not any_GetInfo_result1_2.variants or not any_GetInfo_result1_2.variants.colour[var70] then
				local var71
			end
			if var71 then
				return var71.name:byte() * 10000 + var71.name:len() * var71.name:byte(1, var71.name:len()), "Colour"
			end
			return 1, "Colour"
		end}, {"Breed", SortAnimalByBreed_upvr}, {"Purity", function(arg1) -- Line 192, Named "SortAnimalByPurity"
			--[[ Upvalues[2]:
				[1]: References_upvr (readonly)
				[2]: Utilities_upvr (readonly)
			]]
			local var74
			local function INLINED_7() -- Internal function, doesn't exist in bytecode
				var74 = arg1.variants.colour
				return var74
			end
			if not arg1.variants or not INLINED_7() then
				var74 = nil
			end
			if not var74 or not References_upvr.Items.GetInfo(arg1.id).variants.colour[var74] then
			end
			return -((Utilities_upvr.GetAnimalPurity(arg1) or 0.5) * 100), "Purity"
		end}, {"Rarity", function(arg1) -- Line 111, Named "SortByAnimalRarity"
			--[[ Upvalues[1]:
				[1]: References_upvr (readonly)
			]]
			-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
			local any_GetInfo_result1_4 = References_upvr.Items.GetInfo(arg1.id)
			local var51
			local function INLINED() -- Internal function, doesn't exist in bytecode
				var51 = arg1.variants.colour
				return var51
			end
			if not arg1.variants or not INLINED() then
				var51 = nil
			end
			if not var51 or not any_GetInfo_result1_4.variants or not any_GetInfo_result1_4.variants.colour[var51] then
				local var52
			end
			local var53
			if var52 and var52.rarityFloat then
				var53 += var52.rarityFloat * 1000
			end
			return -var53, "Rarity"
		end}, {"Age (Oldest)", function(arg1) -- Line 67, Named "SortAnimalByOldest"
			return arg1.madeAt or 1, "Oldest"
		end}, {"Age (Newest)", SortAnimalByNewest_upvr}, {"Name", function(arg1) -- Line 159, Named "SortAnimalByName"
			--[[ Upvalues[1]:
				[1]: SortAnimalByBreed_upvr (readonly)
			]]
			if arg1.name then
				local name_3 = arg1.name
				return name_3:byte() * 10000 + name_3:len() * name_3:byte(1, name_3:len()), "Name"
			end
			return SortAnimalByBreed_upvr(arg1), "Name"
		end}, {"Value", SortByItemValue}, {"Breeding Cooldown", function(arg1) -- Line 182, Named "SortByBreedingCooldown"
			--[[ Upvalues[2]:
				[1]: Utilities_upvr (readonly)
				[2]: SortAnimalByStats_upvr (readonly)
			]]
			local any_IsOnBreedingCooldown_result1, any_IsOnBreedingCooldown_result2 = Utilities_upvr.IsOnBreedingCooldown(arg1)
			if any_IsOnBreedingCooldown_result1 then
				return any_IsOnBreedingCooldown_result2
			end
			return SortAnimalByStats_upvr(arg1)
		end}};
	};
}
local tbl_4 = {}
local function IsThisCategory(arg1) -- Line 300
	if arg1.equipmentController then
		local tbl_21 = {}
		local var129 = "Food"
		tbl_21[1] = var129
		tbl_21[2] = "Seed"
		tbl_21[3] = "Fertilizer"
		tbl_21[4] = "Dye"
		tbl_21[5] = "Buildable"
		if table.find(tbl_21, arg1.equipmentController) ~= nil then
			var129 = false
		else
			var129 = true
		end
		return var129
	end
	return false
end
tbl_4.IsThisCategory = IsThisCategory
tbl_4.icon = "rbxassetid://13279598206"
tbl_4.order = 2
tbl_4.sortOptions = {{"Value (Each)", SortByItemValue}, {"Value (Total)", SortByTotalValue}}
tbl_10.Equipment = tbl_4
tbl_10.Tack = {
	icon = References_upvr.Assets.images.saddle;
	order = 3;
	sortOptions = {{"Unequipped", SortTackByUnequipped}, {"Equipped", SortTackByEquipped}, {"Type", SortTackByTypeOrder}, {"Value (Each)", SortByItemValue}};
}
local tbl_9 = {}
local function IsThisCategory(arg1) -- Line 340
	--[[ Upvalues[1]:
		[1]: References_upvr (readonly)
	]]
	local var140 = false
	if arg1.tackType ~= nil then
		var140 = References_upvr.TackTypes[arg1.tackType].isAccessory
	end
	return var140
end
tbl_9.IsThisCategory = IsThisCategory
tbl_9.sortOptions = {{"Unequipped", SortTackByUnequipped}, {"Equipped", SortTackByEquipped}, {"Type", SortTackByTypeOrder}, {"Value (Each)", SortByItemValue}}
tbl_9.icon = "rbxassetid://13131645776"
tbl_9.order = 4
tbl_10.Accessories = tbl_9
local tbl_20 = {}
local function IsThisCategory(arg1) -- Line 358
	local var147 = true
	if arg1.equipmentController ~= "Food" then
		if arg1.equipmentController ~= "Dye" then
			var147 = false
		else
			var147 = true
		end
	end
	return var147
end
tbl_20.IsThisCategory = IsThisCategory
tbl_20.icon = "rbxassetid://13131645434"
tbl_20.order = 5
tbl_20.sortOptions = {{"Value (Each)", SortByItemValue}, {"Value (Total)", SortByTotalValue}}
tbl_10["Food, Dyes, & Potions"] = tbl_20
local tbl = {}
local function IsThisCategory(arg1) -- Line 370
	local var153 = true
	if arg1.equipmentController ~= "Seed" then
		var153 = true
		if arg1.equipmentController ~= "Fertilizer" then
			if arg1.category ~= "Resources" then
				var153 = false
			else
				var153 = true
			end
		end
	end
	return var153
end
tbl.IsThisCategory = IsThisCategory
tbl.icon = References_upvr.Assets.images.resources
tbl.order = 6
tbl.sortOptions = {{"Value (Each)", SortByItemValue}, {"Value (Total)", SortByTotalValue}}
tbl_10.Resources = tbl
local tbl_22 = {}
local function IsThisCategory(arg1) -- Line 381
	--[[ Upvalues[1]:
		[1]: References_upvr (readonly)
	]]
	local var158 = false
	if arg1.tackType ~= nil then
		var158 = References_upvr.TackTypes[arg1.tackType].isVehicle
	end
	return var158
end
tbl_22.IsThisCategory = IsThisCategory
tbl_22.sortOptions = {{"Unequipped", SortTackByUnequipped}, {"Equipped", SortTackByEquipped}, {"Type", SortTackByTypeOrder}, {"Value (Each)", SortByItemValue}}
tbl_22.icon = References_upvr.Assets.images.wagonWheel
tbl_22.order = 7
tbl_10.Vehicles = tbl_22
tbl_10.Quest = {
	icon = "rbxassetid://13127477203";
	order = 8;
	unsortable = true;
}
tbl_10["Island D\xE9cor"] = {
	IsThisCategory = function(arg1) -- Line 404, Named "IsThisCategory"
		local var166
		if arg1.equipmentController ~= "Buildable" then
			var166 = false
		else
			var166 = true
		end
		return var166
	end;
	icon = "rbxassetid://15507195070";
	order = 9;
	sortOptions = {{"Value (Each)", SortByItemValue}, {"Value (Total)", SortByTotalValue}};
}
tbl_10["RP Items"] = {
	icon = "rbxassetid://7345236299";
	order = 10;
	unsortable = true;
}
module_upvr_7.categories = tbl_10
local function _(arg1) -- Line 422, Named "SetBottomFrame"
	--[[ Upvalues[2]:
		[1]: Standard_upvr (readonly)
		[2]: Selection_upvr (readonly)
	]]
	local var171
	if arg1 ~= "Standard" then
		var171 = false
	else
		var171 = true
	end
	Standard_upvr.Visible = var171
	if arg1 ~= "Selection" then
		var171 = false
	else
		var171 = true
	end
	Selection_upvr.Visible = var171
end
local function AlertAdditionToInventoryLowQuality_upvr(arg1, arg2, arg3) -- Line 428, Named "AlertAdditionToInventoryLowQuality"
	--[[ Upvalues[5]:
		[1]: References_upvr (readonly)
		[2]: Utilities_upvr (readonly)
		[3]: module_upvr_3 (readonly)
		[4]: module_upvr_2 (readonly)
		[5]: module_2_upvr (readonly)
	]]
	local any_GetInfo_result1_6_upvr = References_upvr.Items.GetInfo(arg1.id)
	if any_GetInfo_result1_6_upvr then
		module_upvr_3.Add("+%s %s":format(Utilities_upvr.String.IntToStringSuffix(arg2 or 1), Utilities_upvr.GetItemName(arg1)), "Inventory", function() -- Line 435
			--[[ Upvalues[5]:
				[1]: module_upvr_2 (copied, readonly)
				[2]: arg3 (readonly)
				[3]: arg1 (readonly)
				[4]: any_GetInfo_result1_6_upvr (readonly)
				[5]: module_2_upvr (copied, readonly)
			]]
			module_2_upvr.Open(arg1, module_upvr_2(arg3, arg1, any_GetInfo_result1_6_upvr), nil, arg3)
		end)
	end
end
local tbl_17_upvr = {-4, 4}
local var175_upvw = 0
local udim2_upvr = UDim2.fromScale(0.75, 0.75)
local function AlertAdditionToInventory_upvr(arg1, arg2, arg3) -- Line 451, Named "AlertAdditionToInventory"
	--[[ Upvalues[7]:
		[1]: References_upvr (readonly)
		[2]: Utilities_upvr (readonly)
		[3]: module_upvr_2 (readonly)
		[4]: module_2_upvr (readonly)
		[5]: var175_upvw (read and write)
		[6]: tbl_17_upvr (readonly)
		[7]: udim2_upvr (readonly)
	]]
	local var177 = arg2 or 1
	local any_GetInfo_result1_8_upvr = References_upvr.Items.GetInfo(arg1.id)
	if any_GetInfo_result1_8_upvr then
		local clone_3 = script.AlertFrame:Clone()
		clone_3.TextLabel.Text = "+%s %s":format(Utilities_upvr.String.IntToStringSuffix(var177), Utilities_upvr.GetItemName(arg1.id, var177))
		var175_upvw += 1
		if 9 < var175_upvw then
			var175_upvw = 1
		end
		local var181 = var175_upvw
		if var175_upvw % 2 == 0 then
			var181 = -0.075
		else
			var181 = 0.075
		end
		clone_3.Position = UDim2.fromScale(0.5, 0.5)
		clone_3.Size = UDim2.new()
		clone_3.Parent = References_upvr.HUD.Bottom.Hotbar.Inventory
		Utilities_upvr.Tween(clone_3, {
			Position = UDim2.fromScale(0.5 + Utilities_upvr.Math.Map(var181, 1, 9, tbl_17_upvr[1], tbl_17_upvr[2], true), -0.75 + var181);
			Size = udim2_upvr;
		}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out, true)
		task.wait(3.5)
		clone_3.TextLabel.Text = ""
		Utilities_upvr.Tween(clone_3, {
			Position = UDim2.fromScale(0.5, 0.5);
			Size = UDim2.new();
		}, 0.5 * References_upvr.Random:NextNumber(0.9, 1.1), Enum.EasingStyle.Back, Enum.EasingDirection.In, true)
		clone_3.Activated:Connect(function() -- Line 459
			--[[ Upvalues[5]:
				[1]: module_upvr_2 (copied, readonly)
				[2]: arg3 (readonly)
				[3]: arg1 (readonly)
				[4]: any_GetInfo_result1_8_upvr (readonly)
				[5]: module_2_upvr (copied, readonly)
			]]
			module_2_upvr.Open(arg1, module_upvr_2(arg3, arg1, any_GetInfo_result1_8_upvr), nil, arg3)
		end):Disconnect()
		clone_3:Destroy()
	end
end
local function GetMenuCategoryForItem_upvr(arg1, arg2) -- Line 490, Named "GetMenuCategoryForItem"
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	if arg1.menuCategory and module_upvr_7.categories[arg1.menuCategory] then
		return arg1.menuCategory
	end
	for i_4, v_3 in pairs(module_upvr_7.categories) do
		if v_3.IsThisCategory and v_3.IsThisCategory(arg1, arg2) == true then
			return i_4
		end
	end
	if module_upvr_7.categories[arg1.category] then
		return arg1.category
	end
end
function module_upvr_7.UpdateSpace() -- Line 507
	--[[ Upvalues[5]:
		[1]: InventoryHandler_upvr (readonly)
		[2]: References_upvr (readonly)
		[3]: Data_upvr (readonly)
		[4]: Standard_upvr (readonly)
		[5]: Utilities_upvr (readonly)
	]]
	local any_GetSlots_result1_3, any_GetSlots_result2, _ = InventoryHandler_upvr.GetSlots()
	local Color3_new_result1 = Color3.new(1, 1, 1)
	if any_GetSlots_result2 < any_GetSlots_result1_3 then
		Color3_new_result1 = Color3.new(1, 0, 0)
	elseif any_GetSlots_result2 * 0.95 < any_GetSlots_result1_3 then
		Color3_new_result1 = Color3.new(1, 1, 0)
	end
	Standard_upvr.Space.AmountLabel.Text = "%s/%s":format(Utilities_upvr.String.UseRichColour(Utilities_upvr.String.FormatThousandths(any_GetSlots_result1_3), Color3_new_result1), Utilities_upvr.String.FormatThousandths(any_GetSlots_result2))
	Standard_upvr.GamePass.Visible = not References_upvr.Premium.HasGamePass(Data_upvr.GetLocal(), "Extra Inventory Space")
end
local module_upvr_5 = require(References_upvr.PlayerScripts.Secondary:WaitForChild("PromptHandler"))
function module_upvr_7.PromptMultipleSelection(arg1, arg2, arg3, arg4) -- Line 522
	--[[ Upvalues[9]:
		[1]: Utilities_upvr (readonly)
		[2]: Selection_upvr (readonly)
		[3]: Data_upvr (readonly)
		[4]: References_upvr (readonly)
		[5]: module_upvr_7 (readonly)
		[6]: module_upvr_3 (readonly)
		[7]: module_upvr_5 (readonly)
		[8]: Standard_upvr (readonly)
		[9]: Backpack_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local module_upvw = {}
	local tbl_15_upvr = {}
	local function UpdateSelectionLabel_upvr() -- Line 527, Named "UpdateSelectionLabel"
		--[[ Upvalues[3]:
			[1]: module_upvw (read and write)
			[2]: Utilities_upvr (copied, readonly)
			[3]: Selection_upvr (copied, readonly)
		]]
		local var216 = 0
		local var217 = 0
		for i_5, v_4 in module_upvw do
			var216 += 1
			var217 += v_4 or 1
		end
		local var218 = ""
		if var216 < var217 then
			v_4 = Utilities_upvr.String
			i_5 = v_4.FormatThousandths
			v_4 = var217
			i_5 = i_5(v_4)
			var218 = " (%s total)":format(i_5)
		end
		Selection_upvr.SelectionLabel.Text = "Selection: %d items%s":format(var216, var218)
	end
	UpdateSelectionLabel_upvr()
	local var219_upvw = false
	Standard_upvr.Visible = false
	Selection_upvr.Visible = true
	module_upvr_7.sinkSelection = true
	Backpack_upvr:Toggle(true)
	local var229 = arg2
	if not var229 then
		var229 = {}
	end
	var219_upvw = true
	if Utilities_upvr.WaitForFirstEvent(Selection_upvr.Select.Activated, Backpack_upvr.Closed, table.unpack(var229)) ~= Selection_upvr.Select.Activated then
		module_upvw = {}
	end
	module_upvr_5.CloseNumberSelector()
	for _, v_5 in pairs(tbl_15_upvr) do
		v_5:Destroy()
	end
	for _, v_6 in pairs({module_upvr_7.ItemSelected:Connect(function(arg1_2) -- Line 541, Named "AddOrRemove"
		--[[ Upvalues[13]:
			[1]: Data_upvr (copied, readonly)
			[2]: References_upvr (copied, readonly)
			[3]: module_upvr_7 (copied, readonly)
			[4]: module_upvw (read and write)
			[5]: UpdateSelectionLabel_upvr (readonly)
			[6]: tbl_15_upvr (readonly)
			[7]: arg1 (readonly)
			[8]: module_upvr_3 (copied, readonly)
			[9]: arg3 (readonly)
			[10]: Utilities_upvr (copied, readonly)
			[11]: arg4 (readonly)
			[12]: module_upvr_5 (copied, readonly)
			[13]: var219_upvw (read and write)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
		local tbl_3 = {}
		local var221 = arg1_2
		tbl_3[1] = "inventory"
		tbl_3[2] = var221
		local any_GetLocal_result1_2 = Data_upvr.GetLocal(tbl_3)
		-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [28] 21. Error Block 5 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [28] 21. Error Block 5 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [36] 28. Error Block 7 start (CF ANALYSIS FAILED)
		module_upvw[arg1_2] = nil
		UpdateSelectionLabel_upvr()
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [41.5]
		-- KONSTANTERROR: [36] 28. Error Block 7 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [42] 34. Error Block 8 start (CF ANALYSIS FAILED)
		nil:Destroy()
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		-- KONSTANTERROR: [42] 34. Error Block 8 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [89] 75. Error Block 41 start (CF ANALYSIS FAILED)
		local var223 = 1
		if arg3 and Utilities_upvr.IsItemStackable(any_GetLocal_result1_2.id) and 1 < (any_GetLocal_result1_2.amt or 1) then
			local amt = any_GetLocal_result1_2.amt
			if arg4 then
				amt = math.min(any_GetLocal_result1_2.amt, arg4)
			end
			local any_NumberSelector_result1, any_NumberSelector_result2 = module_upvr_5.NumberSelector(1, amt, 1, "How many?", tbl_3.name, "Select")
			if not any_NumberSelector_result1 or var219_upvw then return end
			var223 = any_NumberSelector_result2
		end
		module_upvw[arg1_2] = var223
		UpdateSelectionLabel_upvr()
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if not nil then
			local clone = script.Selected:Clone()
			clone.Parent = var221
			table.insert(tbl_15_upvr, clone)
		end
		-- KONSTANTERROR: [89] 75. Error Block 41 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [156] 126. Error Block 31 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [156] 126. Error Block 31 end (CF ANALYSIS FAILED)
	end)}) do
		v_6:Disconnect()
	end
	module_upvr_7.sinkSelection = nil
	Standard_upvr.Visible = true
	Selection_upvr.Visible = false
	Backpack_upvr:Toggle(false)
	return module_upvw
end
function module_upvr_7.ForceGreyOutUnmet(arg1) -- Line 653
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	for i_8, v_7 in pairs(module_upvr_7.listed) do
		local arg1_result1, arg1_result2 = arg1(i_8)
		if not arg1_result1 then
			v_7.forceGreyOut = true
			v_7.forceDisabledReason = arg1_result2
		end
	end
	module_upvr_7.RerenderAll()
end
function module_upvr_7.UngreyOutForced() -- Line 665
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	for _, v_8 in pairs(module_upvr_7.listed) do
		if v_8.forceGreyOut then
			v_8.forceGreyOut = nil
			v_8.forceDisabledReason = nil
		end
	end
	module_upvr_7.RerenderAll()
end
function module_upvr_7.ForceHideUnmet(arg1) -- Line 675
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	for i_10, v_9 in pairs(module_upvr_7.listed) do
		if not arg1(i_10, v_9.data) then
			v_9.forceHiddenByCondition = true
			v_9.forceHide = true
		end
	end
	module_upvr_7.RerenderAll()
end
function module_upvr_7.UnhideForced() -- Line 685
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	for _, v_10 in pairs(module_upvr_7.listed) do
		if v_10.forceHiddenByCondition then
			v_10.forceHiddenByCondition = nil
			v_10.forceHide = nil
		end
	end
	module_upvr_7.RerenderAll()
end
function module_upvr_7.PromptSelection(arg1, arg2) -- Line 695
	--[[ Upvalues[4]:
		[1]: module_upvr_7 (readonly)
		[2]: Backpack_upvr (readonly)
		[3]: Utilities_upvr (readonly)
		[4]: module_upvr_3 (readonly)
	]]
	local var268 = arg2
	if not var268 then
		var268 = {}
	end
	module_upvr_7.sinkSelection = true
	Backpack_upvr:Toggle(true)
	local any_WaitForFirstEvent_result1, any_WaitForFirstEvent_result2_upvr = Utilities_upvr.WaitForFirstEvent(module_upvr_7.ItemSelected, Backpack_upvr.Closed, table.unpack(var268))
	if any_WaitForFirstEvent_result1 == module_upvr_7.ItemSelected then
		local var271_upvw = true
		local var272_upvw
		if arg1 then
			local pcall_result1_2, _ = pcall(function() -- Line 703
				--[[ Upvalues[4]:
					[1]: var271_upvw (read and write)
					[2]: var272_upvw (read and write)
					[3]: arg1 (readonly)
					[4]: any_WaitForFirstEvent_result2_upvr (readonly)
				]]
				local arg1_result1_3, arg1_result2_3 = arg1(any_WaitForFirstEvent_result2_upvr)
				var271_upvw = arg1_result1_3
				var272_upvw = arg1_result2_3
			end)
			if not pcall_result1_2 then
				module_upvr_7.sinkSelection = nil
				Backpack_upvr:Toggle(false)
				module_upvr_3.Add("Something went wrong", "Negative")
				return nil
			end
		end
		if var271_upvw then
			module_upvr_7.sinkSelection = nil
			Backpack_upvr:Toggle(false)
			return any_WaitForFirstEvent_result2_upvr
		end
		if var272_upvw then
			module_upvr_3.Add(var272_upvw, "Negative")
		end
		return module_upvr_7.PromptSelection(arg1)
	end
	module_upvr_7.sinkSelection = nil
	Backpack_upvr:Toggle(false)
end
local any_New_result1_upvr_2 = Utilities_upvr.Dropdown.New(References_upvr.PlayerGui:WaitForChild("Prompts"))
any_New_result1_upvr_2.OptionSelected:Connect(function(arg1, arg2) -- Line 730
	--[[ Upvalues[2]:
		[1]: any_New_result1_upvr_2 (readonly)
		[2]: Sort_upvr (readonly)
	]]
	if arg1 and any_New_result1_upvr_2.sortingCategory then
		Sort_upvr(any_New_result1_upvr_2.sortingCategory, arg1)
	end
end)
function module_upvr_7.ToggleAllCategories(arg1, arg2) -- Line 785
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	for i_12 in pairs(module_upvr_7.categories) do
		local var296 = arg1
		if i_12 == arg2 then
			var296 = not arg1
		end
		module_upvr_7.ToggleCategory(i_12, var296)
	end
end
function module_upvr_7.GetTotalVisibleItemsInCategory(arg1) -- Line 795
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	local var301 = 0
	local var302 = module_upvr_7.categories[arg1]
	if var302 then
		for _, v_11 in ipairs(var302.items) do
			local var306 = module_upvr_7.listed[v_11]
			if var306 and not var306.forceHide and var306.data.loc ~= "storageLocker" and not var306.inOtherLocation then
				var301 += 1
			end
		end
	end
	return var301
end
function module_upvr_7.UpdateCategory(arg1) -- Line 812
	--[[ Upvalues[2]:
		[1]: module_upvr_7 (readonly)
		[2]: Utilities_upvr (readonly)
	]]
	local var307 = module_upvr_7.categories[arg1]
	if var307 then
		local displayName = var307.displayName
		if var307.visible then
			displayName = ""
		else
			displayName = " (x%s)":format(Utilities_upvr.String.FormatThousandths(module_upvr_7.GetTotalVisibleItemsInCategory(arg1)))
		end
		var307.frame.Header.CategoryName.Text = "%s%s":format(displayName or arg1, displayName)
		local frame_2 = var307.frame
		if var307.visible then
			frame_2 = 0
		else
			frame_2 = 0.9
		end
		frame_2.Header.BackgroundTransparency = frame_2
		local var310 = false
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if 0 < module_upvr_7.GetTotalVisibleItemsInCategory(arg1) then
			var310 = not var307.forceHidden
		end
		var307.frame.Visible = var310
	end
end
function module_upvr_7.UpdateAllCategories() -- Line 835
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	for i_14 in pairs(module_upvr_7.categories) do
		module_upvr_7.UpdateCategory(i_14)
	end
end
function module_upvr_7.ToggleCategory(arg1, arg2) -- Line 841
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	local var315 = module_upvr_7.categories[arg1]
	local var316
	if var315 then
		if var316 == nil then
			var316 = not var315.visible
		end
		if var315.visible ~= var316 then
			var315.visible = var316
			module_upvr_7.UpdateCategory(arg1)
			var315.frame.LoadingLabel.Visible = true
			if not var316 then
				var315.listFrame.Visible = false
			end
			module_upvr_7.RerenderCategory(arg1)
			if var316 then
				var315.listFrame.Visible = true
			end
			var315.frame.LoadingLabel.Visible = false
		end
	end
end
local function VisualizeTack_upvr(arg1, arg2, arg3, arg4) -- Line 868, Named "VisualizeTack"
	--[[ Upvalues[3]:
		[1]: Utilities_upvr (readonly)
		[2]: Data_upvr (readonly)
		[3]: References_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 37 start (CF ANALYSIS FAILED)
	local VisualizedTack_3 = arg1:FindFirstChild("VisualizedTack")
	if VisualizedTack_3 then
		VisualizedTack_3:Destroy()
	end
	Instance.new("Folder").Name = "VisualizedTack"
	local var384 = arg2
	if not var384 then
		var384 = {}
	end
	local _, _, _, _ = Utilities_upvr.GetHeight(arg4)
	local pairs_result1_2, pairs_result2, pairs_result3_8 = pairs(var384)
	-- KONSTANTERROR: [0] 1. Error Block 37 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [149] 111. Error Block 30 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [149] 111. Error Block 30 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [31] 25. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [149.14]
	-- KONSTANTERROR: [31] 25. Error Block 6 end (CF ANALYSIS FAILED)
end
function module_upvr_7.UpdateDisabled(arg1) -- Line 922
	--[[ Upvalues[2]:
		[1]: module_upvr_7 (readonly)
		[2]: Data_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var399 = module_upvr_7.listed[arg1]
	if var399 then
		local var400
		if var399.frame then
			local data = var399.data
			var400 = false
			if var399.info.category == "Tack" then
				local var402 = false
				if data.onAnimal ~= nil then
					if Data_upvr.GetLocal({"inventory", data.onAnimal}) == nil then
						var402 = false
					else
						var402 = true
					end
				end
				var400 = var402
			end
			if var399.forceGreyOut then
				var400 = true
			end
			if var400 then
				local Disabled_2 = var399.frame:FindFirstChild("Disabled")
				if not Disabled_2 then
					Disabled_2 = script:WaitForChild("Disabled"):Clone()
				end
				local var405 = Disabled_2
				var405.ReasonLabel.Text = var399.forceDisabledReason or "" or ""
				var405.Parent = var399.frame
				return
			end
			if var405 then
				var405:Destroy()
			end
		end
	end
end
function module_upvr_7.UnhideAllForceHiddenCategories() -- Line 948
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	for i_15, _ in pairs(module_upvr_7.categories) do
		module_upvr_7.ToggleForceHideCategory(i_15, false)
	end
end
function module_upvr_7.ForceHideAllCategoriesBut(arg1) -- Line 954
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	for i_16, _ in pairs(module_upvr_7.categories) do
		local var418 = false
		if type(arg1) == "table" then
			if table.find(arg1, i_16) ~= nil then
				var418 = false
			else
				var418 = true
			end
		elseif i_16 == arg1 then
			var418 = false
		else
			var418 = true
		end
		module_upvr_7.ToggleForceHideCategory(i_16, var418)
	end
end
function module_upvr_7.ToggleForceHideCategory(arg1, arg2) -- Line 966
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	local var419 = module_upvr_7.categories[arg1]
	if var419 then
		var419.forceHidden = arg2
		module_upvr_7.UpdateCategory(arg1)
	end
end
local function _(arg1, arg2) -- Line 974, Named "CompareToSearchTerm"
	local var420
	if arg1:lower():find(arg2) == nil then
		var420 = false
	else
		var420 = true
	end
	return var420
end
local function ShouldRenderForSearchTerm_upvr(arg1, arg2) -- Line 977, Named "ShouldRenderForSearchTerm"
	--[[ Upvalues[2]:
		[1]: Utilities_upvr (readonly)
		[2]: References_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local any_lower_result1 = arg2:lower()
	local var481
	if not arg1.data then
		local tbl_13 = {}
	end
	local info = arg1.info
	if arg1.info.name:lower():find(any_lower_result1) == nil then
		var481 = false
	else
		var481 = true
	end
	if var481 then
		var481 = true
		return var481
	end
	var481 = tbl_13.variants
	if var481 then
		var481 = info.variants
		if var481 then
			var481 = tbl_13.variants
			for i_17, v_14 in var481 do
				if type(v_14) == "string" then
					if v_14:lower():find(any_lower_result1) == nil then
					else
					end
					if true then
						return true
					end
				end
				if not info.variants[i_17] or not info.variants[i_17][v_14] then
					local var484
				end
				if var484 then
					local name = var484.name
					if name then
						if var484.name:lower():find(any_lower_result1) == nil then
							name = false
						else
							name = true
						end
						if name then
							name = true
							return name
						end
					end
				end
			end
		end
	end
	var481 = Utilities_upvr.GetSpecialItemIndicators(tbl_13)
	if var481 then
		for i_18, v_15 in var481 do
			local SpecialItemIndicators = References_upvr.SpecialItemIndicators
			local var487 = SpecialItemIndicators[v_15]
			if var487 then
				if var487.text or v_15:lower():find(any_lower_result1) == nil then
					SpecialItemIndicators = false
				else
					SpecialItemIndicators = true
				end
				if SpecialItemIndicators then
					SpecialItemIndicators = true
					return SpecialItemIndicators
				end
			end
		end
	end
	if info.category == "Animals" then
		local name_4 = tbl_13.name
		if name_4 then
			i_18 = tbl_13.name:lower():find(any_lower_result1)
			if i_18 == nil then
				name_4 = false
			else
				name_4 = true
			end
			if name_4 then
				name_4 = true
				return name_4
			end
		end
		if tbl_13.pId then
			i_18 = References_upvr
			local byId = i_18.Personalities.byId
			if byId[tbl_13.pId] then
				i_18 = any_lower_result1
				v_15 = byId[tbl_13.pId].name:lower()
				SpecialItemIndicators = i_18
				v_15 = v_15:find(SpecialItemIndicators)
				if v_15 == nil then
					byId = false
				else
					byId = true
				end
				if byId then
					byId = true
					return byId
				end
			end
		end
		if tbl_13.gId then
			byId = References_upvr.Genders
			if byId[tbl_13.gId] then
				i_18 = any_lower_result1
				v_15 = byId[tbl_13.gId].name:lower()
				SpecialItemIndicators = i_18
				v_15 = v_15:find(SpecialItemIndicators)
				if v_15 == nil then
					byId = false
				else
					byId = true
				end
				if byId then
					byId = true
					return byId
				end
			end
		end
		local tbl_12 = {"tailColourOg", "maneColourOg", "tailStyleOg", "maneStyleOg"}
		for _, v_16 in tbl_12 do
			local var493 = tbl_13[v_16]
			local var494
			if var493 then
				if var493:lower():find(any_lower_result1) == nil then
					var494 = false
				else
					var494 = true
				end
				if var494 then
					var494 = true
					return var494
				end
			end
		end
	end
	tbl_12 = info.tackType
	local var495 = tbl_12
	if var495 then
		if info.tackType:lower():find(any_lower_result1) == nil then
		else
		end
		if true then
			return true
		end
	end
	local equipmentController = info.equipmentController
	if equipmentController then
		if info.equipmentController:lower():find(any_lower_result1) == nil then
			equipmentController = false
		else
			equipmentController = true
		end
		if equipmentController then
			equipmentController = true
			return equipmentController
		end
	end
	return false
end
local List_upvr = frame.Main:WaitForChild("StorageLocker"):WaitForChild("Content"):WaitForChild("List")
function module_upvr_7.RenderOrUnrender(arg1, arg2) -- Line 1050
	--[[ Upvalues[5]:
		[1]: module_upvr_7 (readonly)
		[2]: module_upvr (readonly)
		[3]: var38_upvw (read and write)
		[4]: ShouldRenderForSearchTerm_upvr (readonly)
		[5]: List_upvr (readonly)
	]]
	local var501 = module_upvr_7.listed[arg1]
	local var502
	if var501 then
		if var502 == nil then
			var502 = false
			if module_upvr_7.visible then
				var502 = true
				if var501.data.loc == "storageLocker" then
					if not module_upvr.isAccessingStorage then
						var502 = false
						-- KONSTANTWARNING: GOTO [41] #31
					end
				elseif not var501.categoryEntry.visible then
					var502 = false
				elseif var501.forceHide then
					var502 = false
				elseif var501.inOtherLocation then
					var502 = false
				end
				if var502 and var38_upvw then
					var502 = ShouldRenderForSearchTerm_upvr(var501, var38_upvw)
					local var503
				end
			end
		end
		if var502 then
			var503 = var501.rendered
			if not var503 then
				var503 = true
				var501.rendered = var503
				var503 = var501.frame
				var503.Visible = true
			end
			local function INLINED_10() -- Internal function, doesn't exist in bytecode
				var503 = List_upvr
				return var503
			end
			if var501.data.loc ~= "storageLocker" or not INLINED_10() then
				var503 = var501.categoryEntry.frame.List
			end
			if var501.frame.Parent ~= var503 then
				var501.frame.Parent = var503
			end
			module_upvr_7.UpdateDisabled(arg1)
			return
		end
		var501.rendered = false
		var501.frame.Visible = false
	end
end
function module_upvr_7.RerenderCategory(arg1) -- Line 1122
	--[[ Upvalues[3]:
		[1]: module_upvr_7 (readonly)
		[2]: Backpack_upvr (readonly)
		[3]: Services_upvr (readonly)
	]]
	local var506 = module_upvr_7.categories[arg1]
	if var506 then
		var506.frame.LoadingLabel.Visible = true
		for _, v_17 in var506.items do
			module_upvr_7.RenderOrUnrender(v_17)
			if (0 + 1) % 1000 == 0 and Backpack_upvr.frame.Visible then
				Services_upvr.Run.Heartbeat:Wait()
			end
		end
		var506.frame.LoadingLabel.Visible = false
	end
end
function module_upvr_7.RerenderAll() -- Line 1145
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	for i_21, _ in module_upvr_7.categories do
		module_upvr_7.RerenderCategory(i_21)
	end
end
local any_New_result1_upvr = Utilities_upvr.FunctionQueue.New()
local var510_upvw = 0
function module_upvr_7.Visualize(arg1) -- Line 1159
	--[[ Upvalues[6]:
		[1]: module_upvr_7 (readonly)
		[2]: any_New_result1_upvr (readonly)
		[3]: var510_upvw (read and write)
		[4]: Services_upvr (readonly)
		[5]: Utilities_upvr (readonly)
		[6]: VisualizeTack_upvr (readonly)
	]]
	local var511_upvr = module_upvr_7.listed[arg1]
	if not var511_upvr then
	else
		task.defer(any_New_result1_upvr.Queue, any_New_result1_upvr, function() -- Line 1163
			--[[ Upvalues[7]:
				[1]: var510_upvw (copied, read and write)
				[2]: Services_upvr (copied, readonly)
				[3]: Utilities_upvr (copied, readonly)
				[4]: var511_upvr (readonly)
				[5]: module_upvr_7 (copied, readonly)
				[6]: arg1 (readonly)
				[7]: VisualizeTack_upvr (copied, readonly)
			]]
			var510_upvw += 1
			if var510_upvw % 100 == 0 then
				Services_upvr.Run.Heartbeat:Wait()
			end
			local any_DisplayItemInFrame_result1 = Utilities_upvr.DisplayItemInFrame(var511_upvr.data, var511_upvr.frame, function() -- Line 1168
				--[[ Upvalues[2]:
					[1]: module_upvr_7 (copied, readonly)
					[2]: arg1 (copied, readonly)
				]]
				local var517
				if module_upvr_7.listed[arg1] == nil then
					var517 = false
				else
					var517 = true
				end
				return var517
			end)
			if any_DisplayItemInFrame_result1 then
				var511_upvr.instance = any_DisplayItemInFrame_result1
				if var511_upvr.info.category == "Animals" then
					VisualizeTack_upvr(any_DisplayItemInFrame_result1, var511_upvr.data.tack, var511_upvr.info, var511_upvr.data)
				end
			end
		end)
	end
end
local module_upvr_6 = require(References_upvr.PlayerScripts.Secondary:WaitForChild("GetPresentableTackData"))
local module_upvr_8 = require(References_upvr.PlayerScripts.Secondary:WaitForChild("QualityHandler"))
function module_upvr_7.AddOrUpdateItem(arg1, arg2, arg3, arg4) -- Line 1180
	--[[ Upvalues[16]:
		[1]: References_upvr (readonly)
		[2]: GetMenuCategoryForItem_upvr (readonly)
		[3]: module_upvr_7 (readonly)
		[4]: module_upvr_2 (readonly)
		[5]: module_upvr_6 (readonly)
		[6]: module_2_upvr (readonly)
		[7]: BindableEvent_upvr (readonly)
		[8]: Utilities_upvr (readonly)
		[9]: any_GetLocal_result1_3_upvw (read and write)
		[10]: Services_upvr (readonly)
		[11]: Data_upvr (readonly)
		[12]: module_upvr (readonly)
		[13]: module_upvr_3 (readonly)
		[14]: module_upvr_8 (readonly)
		[15]: AlertAdditionToInventory_upvr (readonly)
		[16]: AlertAdditionToInventoryLowQuality_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 156 start (CF ANALYSIS FAILED)
	local var521
	if not arg2.id then
		var521 = "not id for guid"
		warn(var521, arg1, arg2)
		return
	end
	var521 = References_upvr.Items
	var521 = arg2.id
	local any_GetInfo_result1_9_upvr = var521.GetInfo(var521)
	local function INLINED_11() -- Internal function, doesn't exist in bytecode
		var521 = GetMenuCategoryForItem_upvr(any_GetInfo_result1_9_upvr, arg2)
		return var521
	end
	if not any_GetInfo_result1_9_upvr or not INLINED_11() then
		var521 = nil
	end
	if not any_GetInfo_result1_9_upvr or not var521 then
		warn("invalid item info or category for data", arg2, any_GetInfo_result1_9_upvr, var521)
		if any_GetInfo_result1_9_upvr then
			warn(any_GetInfo_result1_9_upvr.name)
		end
		return
	end
	local var523 = module_upvr_7.categories[var521]
	local var524_upvw = module_upvr_7.listed[arg1]
	if var524_upvw ~= nil then
	else
	end
	-- KONSTANTERROR: [0] 1. Error Block 156 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [54] 44. Error Block 16 start (CF ANALYSIS FAILED)
	local clone_4 = script:WaitForChild("ItemFrame"):Clone()
	clone_4.Name = arg1
	local tbl_14 = {
		frame = clone_4;
		connections = {clone_4.Activated:Connect(function() -- Line 1214
			--[[ Upvalues[8]:
				[1]: module_upvr_7 (copied, readonly)
				[2]: module_upvr_2 (copied, readonly)
				[3]: arg1 (readonly)
				[4]: var524_upvw (read and write)
				[5]: any_GetInfo_result1_9_upvr (readonly)
				[6]: module_upvr_6 (copied, readonly)
				[7]: module_2_upvr (copied, readonly)
				[8]: BindableEvent_upvr (copied, readonly)
			]]
			if not module_upvr_7.sinkSelection then
				local tbl_19 = {}
				if any_GetInfo_result1_9_upvr.category == "Animals" then
					table.insert(tbl_19, module_upvr_6(arg1))
				end
				module_2_upvr.Open(var524_upvw.data, module_upvr_2(arg1, var524_upvw.data, any_GetInfo_result1_9_upvr), nil, arg1, table.unpack(tbl_19))
			end
			BindableEvent_upvr:Fire(arg1)
		end)};
		categoryEntry = var523;
		info = any_GetInfo_result1_9_upvr;
	}
	tbl_14.data = arg2
	var524_upvw = tbl_14
	local var530 = var524_upvw
	module_upvr_7.listed[arg1] = var530
	table.insert(var523.items, arg1)
	module_upvr_7.Visualize(arg1)
	module_upvr_7.UpdateCategory(var521)
	-- KONSTANTERROR: [54] 44. Error Block 16 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [117] 88. Error Block 17 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [117] 88. Error Block 17 end (CF ANALYSIS FAILED)
end
function module_upvr_7.RemoveItem(arg1) -- Line 1426
	--[[ Upvalues[3]:
		[1]: module_upvr_7 (readonly)
		[2]: References_upvr (readonly)
		[3]: GetMenuCategoryForItem_upvr (readonly)
	]]
	local var533 = module_upvr_7.listed[arg1]
	if var533 then
		local GetMenuCategoryForItem_result1 = GetMenuCategoryForItem_upvr(References_upvr.Items.GetInfo(var533.data.id), var533.data)
		local var535 = module_upvr_7.categories[GetMenuCategoryForItem_result1]
		local table_find_result1 = table.find(var535.items, arg1)
		if table_find_result1 then
			table.remove(var535.items, table_find_result1)
		end
		for _, v_19 in pairs(var533.connections) do
			v_19:Disconnect()
		end
		var533.frame:Destroy()
		module_upvr_7.listed[arg1] = nil
		if module_upvr_7.visible then
			module_upvr_7.UpdateSpace()
		end
		module_upvr_7.UpdateCategory(GetMenuCategoryForItem_result1)
	end
end
function module_upvr_7.UpdateTotalValue() -- Line 1450
	--[[ Upvalues[3]:
		[1]: module_upvr_7 (readonly)
		[2]: Utilities_upvr (readonly)
		[3]: Standard_upvr (readonly)
	]]
	local var544 = 0
	for _, v_20 in pairs(module_upvr_7.listed) do
		var544 += Utilities_upvr.GetItemValue(v_20.data, v_20.data.amt)
	end
	Standard_upvr.Value.Amount.AmountLabel.Text = "%s":format(Utilities_upvr.String.IntToStringSuffix(var544))
end
function module_upvr_7.Toggled(arg1) -- Line 1459
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	module_upvr_7.visible = arg1
	module_upvr_7.RerenderAll()
	if arg1 then
		module_upvr_7.UpdateTotalValue()
		module_upvr_7.UpdateSpace()
	end
end
Data_upvr.BindLocal({"gamePasses"}, function() -- Line 1473
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	module_upvr_7.UpdateSpace()
end, true)
for i_24, _ in pairs(module_upvr_7.categories) do
	(function(arg1) -- Line 737, Named "SetupCategory"
		--[[ Upvalues[7]:
			[1]: module_upvr_7 (readonly)
			[2]: tbl_11_upvr (readonly)
			[3]: any_New_result1_upvr_2 (readonly)
			[4]: Services_upvr (readonly)
			[5]: Inventory_upvr (readonly)
			[6]: Utilities_upvr (readonly)
			[7]: Sort_upvr (readonly)
		]]
		local var280_upvr = module_upvr_7.categories[arg1]
		if not var280_upvr then
			var280_upvr = {}
		end
		local clone_2 = script:WaitForChild("CategoryContainer"):Clone()
		clone_2.Header.Icon.Image = var280_upvr.icon or ""
		clone_2.Header.CategoryName.Text = var280_upvr.displayName or arg1
		local var283_upvw = false
		clone_2.Header.Activated:Connect(function() -- Line 745
			--[[ Upvalues[4]:
				[1]: var283_upvw (read and write)
				[2]: var280_upvr (readonly)
				[3]: module_upvr_7 (copied, readonly)
				[4]: arg1 (readonly)
			]]
			if not var283_upvw then
				var283_upvw = true
				local _, _ = pcall(function() -- Line 748
					--[[ Upvalues[3]:
						[1]: var280_upvr (copied, readonly)
						[2]: module_upvr_7 (copied, readonly)
						[3]: arg1 (copied, readonly)
					]]
					if var280_upvr.visible then
						module_upvr_7.ToggleCategory(arg1, false)
					else
						module_upvr_7.ToggleAllCategories(false, arg1)
					end
				end)
				var283_upvw = false
			end
		end)
		if var280_upvr.unsortable then
			clone_2.Header.Sort.Visible = false
		else
			clone_2.Header.Sort.Activated:Connect(function() -- Line 761
				--[[ Upvalues[5]:
					[1]: var280_upvr (readonly)
					[2]: tbl_11_upvr (copied, readonly)
					[3]: any_New_result1_upvr_2 (copied, readonly)
					[4]: arg1 (readonly)
					[5]: Services_upvr (copied, readonly)
				]]
				local sortOptions = var280_upvr.sortOptions
				if not sortOptions then
					sortOptions = tbl_11_upvr
				end
				any_New_result1_upvr_2.sortingCategory = arg1
				any_New_result1_upvr_2:SetName("Sort by")
				any_New_result1_upvr_2:SetOptions(sortOptions)
				any_New_result1_upvr_2:Toggle(true, Services_upvr.UserInput:GetMouseLocation())
			end)
		end
		clone_2.LayoutOrder = var280_upvr.order
		clone_2.Visible = false
		clone_2.Parent = Inventory_upvr:WaitForChild("Content"):WaitForChild("List")
		Utilities_upvr.AutoSize.Connect(clone_2.List, {'Y'})
		Utilities_upvr.AutoSize.Connect(clone_2, {'Y'})
		var280_upvr.frame = clone_2
		var280_upvr.listFrame = clone_2:WaitForChild("List")
		var280_upvr.visible = true
		var280_upvr.items = {}
		Sort_upvr(arg1, 1)
	end)(i_24)
	local _
end
InventoryHandler_upvr.Bind("Added", function(arg1, arg2, arg3) -- Line 1480
	--[[ Upvalues[1]:
		[1]: module_upvr_7 (readonly)
	]]
	module_upvr_7.AddOrUpdateItem(arg1, arg2, nil, arg3)
end)
InventoryHandler_upvr.Bind("Changed", module_upvr_7.AddOrUpdateItem)
InventoryHandler_upvr.Bind("Removed", module_upvr_7.RemoveItem)
Utilities_upvr.AutoSize.Connect(Inventory_upvr:WaitForChild("Content"):WaitForChild("List"))
local module_upvr_4 = require(References_upvr.PlayerScripts.Secondary:WaitForChild("ChatHandler"))
Backpack_upvr.Toggled:Connect(function(arg1) -- Line 1488
	--[[ Upvalues[4]:
		[1]: Search_upvr (readonly)
		[2]: module_upvr_7 (readonly)
		[3]: InventoryHandler_upvr (readonly)
		[4]: module_upvr_4 (readonly)
	]]
	if arg1 then
		Search_upvr.Text = ""
		module_upvr_7.UpdateAllCategories()
		local any_GetSlots_result1_2, any_GetSlots_result2_2 = InventoryHandler_upvr.GetSlots()
		if any_GetSlots_result2_2 < any_GetSlots_result1_2 then
			module_upvr_4.MakeSystemMessage({
				Text = "Your inventory is over-filled, free up some space!";
				PrefixText = "[WARNING]";
				Color = Color3.fromRGB(255, 0, 0);
			}, true)
		end
	end
end)
local var563_upvw
Search_upvr:GetPropertyChangedSignal("Text"):Connect(function() -- Line 1505, Named "UpdateFromSearch"
	--[[ Upvalues[4]:
		[1]: var563_upvw (read and write)
		[2]: Search_upvr (readonly)
		[3]: var38_upvw (read and write)
		[4]: module_upvr_7 (readonly)
	]]
	if var563_upvw then
		task.cancel(var563_upvw)
	end
	local Text = Search_upvr.Text
	if Text ~= "" then
		var38_upvw = Text
	else
		var38_upvw = nil
	end
	var563_upvw = task.spawn(module_upvr_7.RerenderAll)
end)
local any_GetLocal_result1_5 = Data_upvr.GetLocal({"inventory"})
if not any_GetLocal_result1_5 then
	any_GetLocal_result1_5 = {}
end
for i_25_upvr, v_22_upvr in pairs(any_GetLocal_result1_5) do
	local pcall_result1, pcall_result2 = pcall(function() -- Line 1525
		--[[ Upvalues[3]:
			[1]: module_upvr_7 (readonly)
			[2]: i_25_upvr (readonly)
			[3]: v_22_upvr (readonly)
		]]
		module_upvr_7.AddOrUpdateItem(i_25_upvr, v_22_upvr, nil, true)
	end)
	if not pcall_result1 then
		warn(pcall_result2)
	end
end
module_upvr_7.ToggleAllCategories(false)
Standard_upvr.Visible = true
Selection_upvr.Visible = false
local function _(arg1) -- Line 1537
	--[[ Upvalues[4]:
		[1]: Utilities_upvr (readonly)
		[2]: any_GetLocal_result1_3_upvw (read and write)
		[3]: module_upvr_7 (readonly)
		[4]: Sort_upvr (readonly)
	]]
	if Utilities_upvr.Cooldown.Check("lastChangeLockedAtTopSetting", 1, true) then
		any_GetLocal_result1_3_upvw = arg1
		for i_26, v_23 in module_upvr_7.categories do
			Sort_upvr(i_26, v_23.sortIndex)
		end
		Utilities_upvr.Network:FireServer("Settings", "Save", {
			["Locked At Top"] = true;
		})
		return true
	end
end
local _ = {
	[true] = Toggle.Button.ImageColor3;
	[false] = Toggle.Button.ImageColor3;
}
module_upvr_7.UpdateSpace()
return module_upvr_7
