-- ✅ GUI Setup
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local StartButton = Instance.new("TextButton")

ScreenGui.Name = "HorseGui"
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ResetOnSpawn = false

Frame.Name = "Main"
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(10, 245, 65)
Frame.Size = UDim2.new(0, 250, 0, 80)
Frame.Position = UDim2.new(0.5, -125, 0.5, -40)
Frame.BorderSizePixel = 0
Frame.Active = true
Frame.Draggable = true

StartButton.Name = "StartButton"
StartButton.Parent = Frame
StartButton.BackgroundColor3 = Color3.fromRGB(68, 183, 194)
StartButton.BorderSizePixel = 0
StartButton.Size = UDim2.new(1, -10, 0, 50)
StartButton.Position = UDim2.new(0, 5, 0, 15)
StartButton.Font = Enum.Font.SourceSansBold
StartButton.Text = "START"
StartButton.TextColor3 = Color3.fromRGB(255, 255, 255)
StartButton.TextSize = 24

-- ✅ Collect all island folders dynamically
local islandFolders = {}

for _, child in ipairs(workspace.Islands:GetChildren()) do
	if child:IsA("Folder") then
		table.insert(islandFolders, child)
	end
end

-- ✅ Function to check if a folder has valid targets
local function hasValidTargets(folder)
	local lp = game.Players.LocalPlayer
	for _, model in ipairs(folder:GetChildren()) do
		if model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") and model:FindFirstChild("maneMesh") and model ~= lp.Character then
			return true
		end
	end
	return false
end

-- ✅ Function to get next valid folder (with teleport to load island)
local currentFolderIndex = 1
local function getNextValidFolder(char, hrp)
	local attempts = 0
	while attempts < #islandFolders do
		local folder = islandFolders[currentFolderIndex]
		
		-- Move player model to the island folder to trigger loading
		char.Parent = folder
		
		-- Wait for island to load
		task.wait(1)
		
		if hasValidTargets(folder) then
			-- Find first target and teleport to it
			for _, model in ipairs(folder:GetChildren()) do
				if model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") and model:FindFirstChild("maneMesh") and model ~= char then
					local targetHRP = model.HumanoidRootPart
					hrp.CFrame = targetHRP.CFrame * CFrame.new(0, 0, -5)
					break
				end
			end
			return folder
		end
		
		-- Move to next folder
		currentFolderIndex = currentFolderIndex + 1
		if currentFolderIndex > #islandFolders then
			currentFolderIndex = 1
		end
		attempts = attempts + 1
	end
	
	return nil -- No valid folders found
end

-- ✅ Follow Logic
local currentTask
local currentFolder = nil

local function startFollowing()
	if currentTask then
		task.cancel(currentTask)
	end
	
	local players = game:GetService("Players")
	local lp = players.LocalPlayer
	local char = lp.Character or lp.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	
	-- Find first valid folder (this will move player to load islands)
	currentFolder = getNextValidFolder(char, hrp)
	if not currentFolder then
		warn("No valid folders found!")
		return
	end
	
	local function getValidTargets(folder)
		local targets = {}
		for _, model in ipairs(folder:GetChildren()) do
			if model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") and model:FindFirstChild("maneMesh") and model ~= char then
				table.insert(targets, model)
			end
		end
		return targets
	end
	
	currentTask = task.spawn(function()
		local currentTarget = nil
		local lastSwitch = 0
		local lastFolderCheck = 0
		
		while true do
			local now = tick()
			
			-- Check if current folder still has valid targets every 5 seconds
			if now - lastFolderCheck >= 5 then
				if not hasValidTargets(currentFolder) then
					print("No valid targets in " .. currentFolder.Name .. ", switching folders...")
					-- Find index of current folder
					for i, folder in ipairs(islandFolders) do
						if folder == currentFolder then
							currentFolderIndex = i
							break
						end
					end
					
					local newFolder = getNextValidFolder(char, hrp)
					if newFolder then
						currentFolder = newFolder
						currentTarget = nil
						lastSwitch = 0 -- Force immediate target selection
						print("Switched to: " .. currentFolder.Name)
						
						-- Teleport to new island's first valid target
						local newTargets = getValidTargets(currentFolder)
						if #newTargets > 0 then
							local firstTarget = newTargets[1]
							local targetHRP = firstTarget:FindFirstChild("HumanoidRootPart")
							if targetHRP then
								hrp.CFrame = targetHRP.CFrame * CFrame.new(0, 0, -5)
								print("Teleported to new island!")
							end
						end
					else
						print("No valid folders found!")
						task.wait(5)
					end
				end
				lastFolderCheck = now
			end
			
			-- Switch target every 15 seconds or if lost
			if not currentTarget or not currentTarget.Parent or now - lastSwitch >= 15 then
				local targets = getValidTargets(currentFolder)
				if #targets > 0 then
					local newTarget
					repeat
						newTarget = targets[math.random(1, #targets)]
					until newTarget ~= currentTarget or #targets == 1
					currentTarget = newTarget
					lastSwitch = now
					local targetHRP = currentTarget:FindFirstChild("HumanoidRootPart")
					if targetHRP then
						hrp.CFrame = targetHRP.CFrame * CFrame.new(0, 0, -5)
					end
				end
			end
			
			-- Follow current target
			if currentTarget and currentTarget:FindFirstChild("HumanoidRootPart") then
				local targetHRP = currentTarget.HumanoidRootPart
				local distance = (hrp.Position - targetHRP.Position).Magnitude
				if distance > 6 then
					hrp.CFrame = CFrame.new(targetHRP.Position + Vector3.new(0, 0, -4))
				end
				if distance > 30 then
					hrp.CFrame = targetHRP.CFrame * CFrame.new(0, 0, -4)
				end
			end
			
			task.wait(0.2)
		end
	end)
end

-- ✅ Button Activation
StartButton.MouseButton1Click:Connect(function()
	startFollowing()
end)

-- ✅ Safely remove LavaParts if it exists
local volcanoIsland = workspace.Islands:FindFirstChild("Volcano Island")
if volcanoIsland then
	local lavaParts = volcanoIsland:FindFirstChild("LavaParts")
	if lavaParts then
		lavaParts:Destroy()
	end
end
