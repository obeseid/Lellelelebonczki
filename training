--// Player Setup
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

--// Create GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

--// Create Button
local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 180, 0, 60)
button.Position = UDim2.new(0.5, -90, 0.5, -30) -- Center
button.BackgroundColor3 = Color3.fromRGB(95, 242, 27)
button.TextColor3 = Color3.new(0, 0, 0)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 24
button.Text = "Start Teleport"
button.Active = true
button.Draggable = true
button.Parent = screenGui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 12)
corner.Parent = button

--// Teleport Variables
local teleporting = false
local teleportCoroutine

--// Teleport Function
local function teleportLoop()
	local character = player.Character or player.CharacterAdded:Wait()
	local hrp = character:WaitForChild("HumanoidRootPart")
	local humanoid = character:WaitForChild("Humanoid")

	-- Path to checkpoints
	local checkpointsFolder = workspace:WaitForChild("Islands")
		:WaitForChild("Training Island")
		:WaitForChild("Outdoor Arena")
		:WaitForChild("DynamicArena")
		:WaitForChild("_LAYOUT")
		:WaitForChild("CheckpointActivity")
		:WaitForChild("Routes")
		:WaitForChild("Checkpoints")

	local checkpointNames = {"1", "2", "3", "4"} -- Edit as needed

	while teleporting do
		for _, name in ipairs(checkpointNames) do
			if not teleporting then return end

			local checkpoint = checkpointsFolder:FindFirstChild(name)
			if checkpoint and checkpoint:IsA("BasePart") then

				local seatPart = humanoid.SeatPart
				if seatPart and seatPart:IsDescendantOf(workspace) then
					-- Player is on a horse or vehicle
					local mountModel = seatPart:FindFirstAncestorWhichIsA("Model")

					if mountModel then
						-- Temporarily anchor all parts to avoid physics glitch
						for _, part in ipairs(mountModel:GetDescendants()) do
							if part:IsA("BasePart") then
								part.Anchored = true
							end
						end

						local targetCFrame = checkpoint.CFrame

						if mountModel.PrimaryPart then
							mountModel:SetPrimaryPartCFrame(targetCFrame)
						else
							seatPart.CFrame = targetCFrame
						end

						task.wait(0.1)

						-- Unanchor after moving
						for _, part in ipairs(mountModel:GetDescendants()) do
							if part:IsA("BasePart") then
								part.Anchored = false
							end
						end
					else
						-- Fallback: seat only
						seatPart.Anchored = true
						seatPart.CFrame = checkpoint.CFrame
						task.wait(0.1)
						seatPart.Anchored = false
					end
				else
					-- On foot: just move player
					hrp.CFrame = checkpoint.CFrame
				end
			else
				warn("Checkpoint named " .. name .. " not found or is not a part")
			end

			task.wait(2)
		end
	end
end

--// Button Click Event
button.MouseButton1Click:Connect(function()
	if not teleporting then
		teleporting = true
		button.Text = "Stop Teleport"
		teleportCoroutine = coroutine.create(teleportLoop)
		coroutine.resume(teleportCoroutine)
	else
		teleporting = false
		button.Text = "Start Teleport"
	end
end)
