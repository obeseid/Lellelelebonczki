-- LocalScript - Place this in StarterPlayer > StarterPlayerScripts

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Create ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "RemoteEventMonitor"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

-- Create main frame
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 400, 0, 300)
mainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
mainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
mainFrame.BorderSizePixel = 2
mainFrame.BorderColor3 = Color3.fromRGB(255, 255, 255)
mainFrame.Parent = screenGui

-- Add UICorner
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = mainFrame

-- Create title bar
local titleBar = Instance.new("TextLabel")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 35)
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
titleBar.BorderSizePixel = 0
titleBar.Text = "RemoteEvent Monitor"
titleBar.TextColor3 = Color3.fromRGB(255, 255, 255)
titleBar.TextSize = 18
titleBar.Font = Enum.Font.GothamBold
titleBar.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 8)
titleCorner.Parent = titleBar

-- Create display label
local displayLabel = Instance.new("TextLabel")
displayLabel.Name = "DisplayLabel"
displayLabel.Size = UDim2.new(1, -20, 1, -55)
displayLabel.Position = UDim2.new(0, 10, 0, 45)
displayLabel.BackgroundTransparency = 1
displayLabel.Text = "Waiting for RemoteEvent..."
displayLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
displayLabel.TextSize = 14
displayLabel.Font = Enum.Font.Code
displayLabel.TextWrapped = true
displayLabel.TextXAlignment = Enum.TextXAlignment.Left
displayLabel.TextYAlignment = Enum.TextYAlignment.Top
displayLabel.Parent = mainFrame

-- Function to get full path of an instance
local function getFullPath(instance)
	if not instance then return "Unknown" end
	
	local path = {}
	local current = instance
	
	-- Build path from instance to game
	while current and current ~= game do
		table.insert(path, 1, current.Name)
		current = current.Parent
	end
	
	-- Add game at the start
	table.insert(path, 1, "game")
	
	return table.concat(path, ".")
end

-- Safe metatable hooking with proper error handling
local success, mt = pcall(function()
	return getrawmetatable(game)
end)

if success and mt then
	local oldNamecall = mt.__namecall
	
	pcall(function()
		setreadonly(mt, false)
	end)
	
	mt.__namecall = newcclosure(function(self, ...)
		local args = {...}
		local method = getnamecallmethod()
		
		-- Only intercept FireServer on RemoteEvents
		if method == "FireServer" then
			local isRemote = pcall(function()
				return self:IsA("RemoteEvent")
			end)
			
			if isRemote and self:IsA("RemoteEvent") then
				pcall(function()
					local eventName = self.Name
					local eventPath = getFullPath(self)
					
					displayLabel.Text = string.format(
						"RemoteEvent Fired!\n\nName: %s\n\nFull Path:\n%s\n\nTime: %s",
						eventName,
						eventPath,
						os.date("%H:%M:%S")
					)
				end)
			end
		end
		
		-- Always call the original function
		return oldNamecall(self, ...)
	end)
	
	pcall(function()
		setreadonly(mt, true)
	end)
	
	print("RemoteEvent Monitor initialized with metatable hook!")
else
	warn("RemoteEvent Monitor: Metatable hooking not available (requires executor)")
	displayLabel.Text = "Metatable hooking not available!\n\nThis script requires an executor with:\n- getrawmetatable\n- setreadonly\n- newcclosure\n- getnamecallmethod"
end
