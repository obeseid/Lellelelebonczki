-- LocalScript - Place inside StarterPlayer > StarterPlayerScripts or StarterGui
local Players = game:GetService("Players")
local player = Players.LocalPlayer
-- Wait for PlayerGui
local playerGui = player:WaitForChild("PlayerGui")
-- Variables
local tradePartnerUsername = nil
local isMonitoring = false
-- Function to extract username from the title text
local function extractUsername(text)
	local username = text:match("%((.-)%)")
	return username
end
-- Setup monitoring for the trading GUI
local function setupMonitoring()
	local menusFolder = playerGui:WaitForChild("Menus")
	local tradingGui = menusFolder:WaitForChild("Trading")
	local header = tradingGui:WaitForChild("Header")
	local titleLabel = header:WaitForChild("Title")
	
	-- Monitor when trading GUI becomes visible
	tradingGui:GetPropertyChangedSignal("Visible"):Connect(function()
		if tradingGui.Visible then
			-- Trade started, extract partner username
			tradePartnerUsername = extractUsername(titleLabel.Text)
			isMonitoring = true
			print("Trading started with:", tradePartnerUsername)
		else
			-- Trade ended normally
			isMonitoring = false
			tradePartnerUsername = nil
		end
	end)
	
	-- Monitor title changes
	titleLabel:GetPropertyChangedSignal("Text"):Connect(function()
		if tradingGui.Visible then
			tradePartnerUsername = extractUsername(titleLabel.Text)
		end
	end)
	
	-- Monitor players leaving
	Players.PlayerRemoving:Connect(function(leavingPlayer)
		if isMonitoring and tradePartnerUsername and leavingPlayer.Name == tradePartnerUsername then
			print("Trade partner left! Creating frozen GUI...")
			
			-- Clone the entire Menus folder directly
			local menusClone = menusFolder:Clone()
			menusClone.Name = "FrozenMenus"
			
			-- Get the Trading GUI from the cloned Menus
			local frozenClone = menusClone:FindFirstChild("Trading")
			
			-- Remove everything except Trading from the Menus clone
			for _, child in pairs(menusClone:GetChildren()) do
				if child ~= frozenClone then
					child:Destroy()
				end
			end
			
			-- Force Trading to be visible
			frozenClone.Visible = true
			
			-- Disable all interactive elements
			for _, descendant in pairs(frozenClone:GetDescendants()) do
				if descendant:IsA("GuiButton") or descendant:IsA("TextButton") or descendant:IsA("ImageButton") then
					descendant.Active = false
				end
			end
			
			-- Parent the Menus clone directly to PlayerGui (same level as original)
			menusClone.Parent = playerGui
			
			-- Disable HUD
			local hudGui = playerGui:FindFirstChild("HUD")
			if hudGui then
				hudGui.Enabled = false
				print("HUD disabled")
			end
			
			-- Get the execution timer and start countdown
			local executionTimer = frozenClone:FindFirstChild("Content", true)
			if executionTimer then
				executionTimer = executionTimer:FindFirstChild("Content")
				if executionTimer then
					executionTimer = executionTimer:FindFirstChild("Center")
					if executionTimer then
						executionTimer = executionTimer:FindFirstChild("ExecutionTimer")
						if executionTimer and executionTimer:IsA("TextLabel") then
							-- Extract number from "Trading in 15s" format
							local currentTime = tonumber(executionTimer.Text:match("%d+"))
							if currentTime then
								print("Starting countdown from:", currentTime)
								-- Start countdown
								task.spawn(function()
									for i = currentTime, 0, -1 do
										if executionTimer and executionTimer.Parent then
											executionTimer.Text = "Trading in " .. tostring(i) .. "s"
											task.wait(1)
										else
											break
										end
									end
								end)
							end
						end
					end
				end
			end
			
			print("Frozen GUI created successfully!")
			
			-- Destroy after 11 seconds
			task.spawn(function()
				task.wait(11)
				if menusClone and menusClone.Parent then
					menusClone:Destroy()
					print("Cloned Menus and Trading GUI destroyed!")
				end
				
				-- Re-enable HUD
				if hudGui then
					hudGui.Enabled = true
					print("HUD re-enabled")
				end
			end)
			
			isMonitoring = false
			tradePartnerUsername = nil
		end
	end)
	
	print("Trade monitoring active!")
end
-- Start monitoring
local success, err = pcall(setupMonitoring)
if not success then
	warn("Failed to setup monitoring:", err)
end
