-- Roblox Item Cloner & Editor GUI Script
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Function to generate a random GUID format string
local function generateGUID()
    local template = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    local guid = string.gsub(template, "x", function()
        return string.format("%x", math.random(0, 15))
    end)
    return "{" .. guid .. "}"
end

-- Function to parse RGB string
local function parseRGB(rgbString)
    if not rgbString or rgbString == "" then
        return nil
    end
    
    -- Remove spaces and parse
    local cleanString = string.gsub(rgbString, "%s+", "")
    local r, g, b = string.match(cleanString, "(%d+),(%d+),(%d+)")
    
    if r and g and b then
        local red = math.clamp(tonumber(r), 0, 255)
        local green = math.clamp(tonumber(g), 0, 255)
        local blue = math.clamp(tonumber(b), 0, 255)
        return Color3.fromRGB(red, green, blue)
    end
    
    return nil
end

-- Create main GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ItemClonerGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

-- Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 450, 0, 650)
mainFrame.Position = UDim2.new(0.5, -225, 0.5, -325)
mainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = UDim.new(0, 10)
mainCorner.Parent = mainFrame

-- Title
local title = Instance.new("TextLabel")
title.Name = "Title"
title.Size = UDim2.new(1, 0, 0, 40)
title.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
title.BorderSizePixel = 0
title.Text = "Item Cloner & Editor"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextSize = 20
title.Font = Enum.Font.GothamBold
title.Parent = mainFrame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 10)
titleCorner.Parent = title

-- Make GUI draggable (attach to title bar)
local UserInputService = game:GetService("UserInputService")
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

title.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

title.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Close Button
local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -35, 0, 5)
closeButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
closeButton.Text = "X"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextSize = 18
closeButton.Font = Enum.Font.GothamBold
closeButton.Parent = title

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 5)
closeCorner.Parent = closeButton

closeButton.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

-- Scan Button
local scanButton = Instance.new("TextButton")
scanButton.Name = "ScanButton"
scanButton.Size = UDim2.new(0, 140, 0, 35)
scanButton.Position = UDim2.new(0, 15, 0, 50)
scanButton.BackgroundColor3 = Color3.fromRGB(50, 150, 255)
scanButton.Text = "Scan for Items"
scanButton.TextColor3 = Color3.fromRGB(255, 255, 255)
scanButton.TextSize = 16
scanButton.Font = Enum.Font.GothamBold
scanButton.Parent = mainFrame

local scanCorner = Instance.new("UICorner")
scanCorner.CornerRadius = UDim.new(0, 8)
scanCorner.Parent = scanButton

-- Auto Clone Button
local autoCloneButton = Instance.new("TextButton")
autoCloneButton.Name = "AutoCloneButton"
autoCloneButton.Size = UDim2.new(0, 140, 0, 35)
autoCloneButton.Position = UDim2.new(1, -155, 0, 50)
autoCloneButton.BackgroundColor3 = Color3.fromRGB(255, 150, 50)
autoCloneButton.Text = "Auto Clone Random"
autoCloneButton.TextColor3 = Color3.fromRGB(255, 255, 255)
autoCloneButton.TextSize = 14
autoCloneButton.Font = Enum.Font.GothamBold
autoCloneButton.Parent = mainFrame

local autoCloneCorner = Instance.new("UICorner")
autoCloneCorner.CornerRadius = UDim.new(0, 8)
autoCloneCorner.Parent = autoCloneButton

-- ScrollingFrame for detected items
local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Name = "ItemList"
scrollFrame.Size = UDim2.new(1, -20, 0, 250)
scrollFrame.Position = UDim2.new(0, 10, 0, 95)
scrollFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 6
scrollFrame.Parent = mainFrame

local scrollCorner = Instance.new("UICorner")
scrollCorner.CornerRadius = UDim.new(0, 8)
scrollCorner.Parent = scrollFrame

local listLayout = Instance.new("UIListLayout")
listLayout.SortOrder = Enum.SortOrder.LayoutOrder
listLayout.Padding = UDim.new(0, 5)
listLayout.Parent = scrollFrame

-- Editor Section
local editorFrame = Instance.new("Frame")
editorFrame.Size = UDim2.new(1, -20, 0, 240)
editorFrame.Position = UDim2.new(0, 10, 0, 355)
editorFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
editorFrame.BorderSizePixel = 0
editorFrame.Parent = mainFrame

local editorCorner = Instance.new("UICorner")
editorCorner.CornerRadius = UDim.new(0, 8)
editorCorner.Parent = editorFrame

-- NameLabel Input
local nameLabel = Instance.new("TextLabel")
nameLabel.Size = UDim2.new(0, 100, 0, 25)
nameLabel.Position = UDim2.new(0, 10, 0, 10)
nameLabel.BackgroundTransparency = 1
nameLabel.Text = "NameLabel Text:"
nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
nameLabel.TextSize = 13
nameLabel.Font = Enum.Font.Gotham
nameLabel.TextXAlignment = Enum.TextXAlignment.Left
nameLabel.Parent = editorFrame

local nameInput = Instance.new("TextBox")
nameInput.Name = "NameInput"
nameInput.Size = UDim2.new(1, -120, 0, 25)
nameInput.Position = UDim2.new(0, 110, 0, 10)
nameInput.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
nameInput.Text = ""
nameInput.TextColor3 = Color3.fromRGB(255, 255, 255)
nameInput.TextSize = 13
nameInput.Font = Enum.Font.Gotham
nameInput.PlaceholderText = "Enter new name..."
nameInput.ClearTextOnFocus = false
nameInput.Parent = editorFrame

local nameCorner = Instance.new("UICorner")
nameCorner.CornerRadius = UDim.new(0, 5)
nameCorner.Parent = nameInput

-- ImageID Input
local imageLabel = Instance.new("TextLabel")
imageLabel.Size = UDim2.new(0, 100, 0, 25)
imageLabel.Position = UDim2.new(0, 10, 0, 45)
imageLabel.BackgroundTransparency = 1
imageLabel.Text = "Image ID:"
imageLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
imageLabel.TextSize = 13
imageLabel.Font = Enum.Font.Gotham
imageLabel.TextXAlignment = Enum.TextXAlignment.Left
imageLabel.Parent = editorFrame

local imageInput = Instance.new("TextBox")
imageInput.Name = "ImageInput"
imageInput.Size = UDim2.new(1, -120, 0, 25)
imageInput.Position = UDim2.new(0, 110, 0, 45)
imageInput.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
imageInput.Text = ""
imageInput.TextColor3 = Color3.fromRGB(255, 255, 255)
imageInput.TextSize = 13
imageInput.Font = Enum.Font.Gotham
imageInput.PlaceholderText = "Enter image ID (rbxassetid://...)..."
imageInput.ClearTextOnFocus = false
imageInput.Parent = editorFrame

local imageCorner = Instance.new("UICorner")
imageCorner.CornerRadius = UDim.new(0, 5)
imageCorner.Parent = imageInput

-- SpecialIndicator Color Input
local colorLabel = Instance.new("TextLabel")
colorLabel.Size = UDim2.new(0, 100, 0, 25)
colorLabel.Position = UDim2.new(0, 10, 0, 80)
colorLabel.BackgroundTransparency = 1
colorLabel.Text = "SpecialIndicator Color:"
colorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
colorLabel.TextSize = 13
colorLabel.Font = Enum.Font.Gotham
colorLabel.TextXAlignment = Enum.TextXAlignment.Left
colorLabel.Parent = editorFrame

local colorInput = Instance.new("TextBox")
colorInput.Name = "ColorInput"
colorInput.Size = UDim2.new(1, -120, 0, 25)
colorInput.Position = UDim2.new(0, 110, 0, 80)
colorInput.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
colorInput.Text = ""
colorInput.TextColor3 = Color3.fromRGB(255, 255, 255)
colorInput.TextSize = 13
colorInput.Font = Enum.Font.Gotham
colorInput.PlaceholderText = "R,G,B (e.g., 255,0,0 for red)"
colorInput.ClearTextOnFocus = false
colorInput.Parent = editorFrame

local colorCorner = Instance.new("UICorner")
colorCorner.CornerRadius = UDim.new(0, 5)
colorCorner.Parent = colorInput

-- Color Preview
local colorPreview = Instance.new("Frame")
colorPreview.Size = UDim2.new(0, 40, 0, 25)
colorPreview.Position = UDim2.new(1, -45, 0, 80)
colorPreview.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
colorPreview.BorderSizePixel = 1
colorPreview.BorderColor3 = Color3.fromRGB(100, 100, 100)
colorPreview.Parent = editorFrame

local colorPreviewCorner = Instance.new("UICorner")
colorPreviewCorner.CornerRadius = UDim.new(0, 5)
colorPreviewCorner.Parent = colorPreview

-- Update color preview when text changes
colorInput:GetPropertyChangedSignal("Text"):Connect(function()
    local color = parseRGB(colorInput.Text)
    if color then
        colorPreview.BackgroundColor3 = color
    else
        colorPreview.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    end
end)

-- Clone Amount Input
local amountLabel = Instance.new("TextLabel")
amountLabel.Size = UDim2.new(0, 100, 0, 25)
amountLabel.Position = UDim2.new(0, 10, 0, 115)
amountLabel.BackgroundTransparency = 1
amountLabel.Text = "Clone Amount:"
amountLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
amountLabel.TextSize = 13
amountLabel.Font = Enum.Font.Gotham
amountLabel.TextXAlignment = Enum.TextXAlignment.Left
amountLabel.Parent = editorFrame

local amountInput = Instance.new("TextBox")
amountInput.Name = "AmountInput"
amountInput.Size = UDim2.new(0, 80, 0, 25)
amountInput.Position = UDim2.new(0, 110, 0, 115)
amountInput.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
amountInput.Text = "20"
amountInput.TextColor3 = Color3.fromRGB(255, 255, 255)
amountInput.TextSize = 13
amountInput.Font = Enum.Font.Gotham
amountInput.PlaceholderText = "Amount"
amountInput.Parent = editorFrame

local amountCorner = Instance.new("UICorner")
amountCorner.CornerRadius = UDim.new(0, 5)
amountCorner.Parent = amountInput

-- Apply to All Checkbox
local applyAllCheckbox = Instance.new("TextButton")
applyAllCheckbox.Size = UDim2.new(0, 20, 0, 20)
applyAllCheckbox.Position = UDim2.new(0, 10, 0, 150)
applyAllCheckbox.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
applyAllCheckbox.Text = ""
applyAllCheckbox.Parent = editorFrame

local checkCorner = Instance.new("UICorner")
checkCorner.CornerRadius = UDim.new(0, 4)
checkCorner.Parent = applyAllCheckbox

local checkmark = Instance.new("TextLabel")
checkmark.Size = UDim2.new(1, 0, 1, 0)
checkmark.BackgroundTransparency = 1
checkmark.Text = ""
checkmark.TextColor3 = Color3.fromRGB(100, 255, 100)
checkmark.TextSize = 16
checkmark.Font = Enum.Font.GothamBold
checkmark.Parent = applyAllCheckbox

local applyAllLabel = Instance.new("TextLabel")
applyAllLabel.Size = UDim2.new(0, 200, 0, 20)
applyAllLabel.Position = UDim2.new(0, 35, 0, 150)
applyAllLabel.BackgroundTransparency = 1
applyAllLabel.Text = "Apply edits to all clones"
applyAllLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
applyAllLabel.TextSize = 12
applyAllLabel.Font = Enum.Font.Gotham
applyAllLabel.TextXAlignment = Enum.TextXAlignment.Left
applyAllLabel.Parent = editorFrame

local applyToAll = false
applyAllCheckbox.MouseButton1Click:Connect(function()
    applyToAll = not applyToAll
    checkmark.Text = applyToAll and "✓" or ""
end)

-- Status Label
local statusLabel = Instance.new("TextLabel")
statusLabel.Name = "StatusLabel"
statusLabel.Size = UDim2.new(1, -20, 0, 40)
statusLabel.Position = UDim2.new(0, 10, 0, 600)
statusLabel.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
statusLabel.Text = "Ready to scan..."
statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
statusLabel.TextSize = 12
statusLabel.Font = Enum.Font.Gotham
statusLabel.Parent = mainFrame

local statusCorner = Instance.new("UICorner")
statusCorner.CornerRadius = UDim.new(0, 6)
statusCorner.Parent = statusLabel

-- Variables to store detected items
local detectedItems = {}
local selectedButton = nil

-- Function to replace ViewportFrame with ImageLabel
local function replaceViewportWithImage(button, imageId)
    -- Find and remove existing ViewportFrame
    local viewportFrame = button:FindFirstChild("DisplayViewport") or button:FindFirstChildOfClass("ViewportFrame")
    if viewportFrame then
        viewportFrame:Destroy()
    end
    
    -- Find and remove existing ImageLabel/ImageButton
    local existingImage = button:FindFirstChild("DisplayImage") or button:FindFirstChildOfClass("ImageLabel") or button:FindFirstChildOfClass("ImageButton")
    if existingImage then
        existingImage:Destroy()
    end
    
    -- Create new ImageLabel
    local imageLabel = Instance.new("ImageLabel")
    imageLabel.Name = "DisplayImage"
    imageLabel.Size = UDim2.new(1, 0, 1, 0)
    imageLabel.BackgroundTransparency = 1
    imageLabel.Image = imageId
    imageLabel.ScaleType = Enum.ScaleType.Fit
    imageLabel.Parent = button
    
    return imageLabel
end

-- Function to apply SpecialIndicator color
local function applySpecialIndicatorColor(button, color)
    local specialIndicator = button:FindFirstChild("SpecialIndicator")
    if specialIndicator and specialIndicator:IsA("Frame") then
        specialIndicator.BackgroundColor3 = color
    end
end

-- Function to create item button in list
local function createItemButton(buttonName, buttonRef, parentList)
    local itemButton = Instance.new("TextButton")
    itemButton.Size = UDim2.new(1, -10, 0, 40)
    itemButton.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
    itemButton.Text = buttonName
    itemButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    itemButton.TextSize = 11
    itemButton.Font = Enum.Font.Gotham
    itemButton.TextXAlignment = Enum.TextXAlignment.Left
    itemButton.TextTruncate = Enum.TextTruncate.AtEnd
    itemButton.Parent = scrollFrame
    
    local itemCorner = Instance.new("UICorner")
    itemCorner.CornerRadius = UDim.new(0, 6)
    itemCorner.Parent = itemButton
    
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 10)
    padding.Parent = itemButton
    
    -- Select button to load values
    itemButton.MouseButton1Click:Connect(function()
        selectedButton = buttonRef
        
        -- Load current values
        local nameL = buttonRef:FindFirstChild("NameLabel")
        local displayImg = buttonRef:FindFirstChild("DisplayImage") or buttonRef:FindFirstChildOfClass("ImageLabel") or buttonRef:FindFirstChildOfClass("ImageButton")
        local viewportFrame = buttonRef:FindFirstChild("DisplayViewport") or buttonRef:FindFirstChildOfClass("ViewportFrame")
        local specialIndicator = buttonRef:FindFirstChild("SpecialIndicator")
        
        if nameL and nameL:IsA("TextLabel") then
            nameInput.Text = nameL.Text
        else
            nameInput.Text = ""
        end
        
        if displayImg then
            if displayImg:IsA("ImageLabel") or displayImg:IsA("ImageButton") then
                imageInput.Text = displayImg.Image
            end
        elseif viewportFrame then
            imageInput.Text = "ViewportFrame (3D Model)"
        else
            imageInput.Text = ""
        end
        
        -- Load SpecialIndicator color
        if specialIndicator and specialIndicator:IsA("Frame") then
            local color = specialIndicator.BackgroundColor3
            colorInput.Text = math.floor(color.R * 255) .. "," .. math.floor(color.G * 255) .. "," .. math.floor(color.B * 255)
        else
            colorInput.Text = ""
        end
        
        statusLabel.Text = "Selected: " .. buttonName
        statusLabel.TextColor3 = Color3.fromRGB(150, 200, 255)
    end)
    
    -- Clone button
    local cloneBtn = Instance.new("TextButton")
    cloneBtn.Size = UDim2.new(0, 60, 0, 30)
    cloneBtn.Position = UDim2.new(1, -70, 0.5, -15)
    cloneBtn.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
    cloneBtn.Text = "Clone"
    cloneBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    cloneBtn.TextSize = 13
    cloneBtn.Font = Enum.Font.GothamBold
    cloneBtn.Parent = itemButton
    
    local cloneCorner = Instance.new("UICorner")
    cloneCorner.CornerRadius = UDim.new(0, 5)
    cloneCorner.Parent = cloneBtn
    
    -- Clone functionality
    cloneBtn.MouseButton1Click:Connect(function()
        print("=== CLONE BUTTON CLICKED ===")
        local amount = tonumber(amountInput.Text) or 20
        print("Amount to clone: " .. amount)
        
        if amount <= 0 then
            statusLabel.Text = "Error: Amount must be greater than 0"
            statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
            return
        end
        
        print("Cloning " .. amount .. " items...")
        statusLabel.Text = "Cloning " .. amount .. " copies..."
        statusLabel.TextColor3 = Color3.fromRGB(255, 200, 100)
        
        local parentList = buttonRef.Parent
        local newName = nameInput.Text
        local newImageId = imageInput.Text
        local newColor = parseRGB(colorInput.Text)
        local shouldApplyEdits = (checkmark.Text == "✓")
        
        print("Parent list: " .. tostring(parentList))
        print("New name: " .. newName)
        print("New image ID: " .. newImageId)
        print("New color: " .. tostring(newColor))
        print("Should apply edits: " .. tostring(shouldApplyEdits))
        print("Checkmark text: '" .. checkmark.Text .. "'")
        
        for i = 1, amount do
            print("=== Starting clone #" .. i .. " ===")
            local clone = buttonRef:Clone()
            clone.Name = generateGUID()
            clone.Visible = true
            
            -- Apply edits if checkbox is enabled OR if we have valid edits to apply
            if shouldApplyEdits or (newName ~= "") or (newImageId and newImageId ~= "" and newImageId ~= "ViewportFrame (3D Model)") or newColor then
                local nameL = clone:FindFirstChild("NameLabel")
                
                -- Apply name change
                if nameL and nameL:IsA("TextLabel") and newName ~= "" then
                    nameL.Text = newName
                end
                
                -- Apply image change (replace ViewportFrame with ImageLabel if needed)
                if newImageId and newImageId ~= "" and newImageId ~= "ViewportFrame (3D Model)" then
                    replaceViewportWithImage(clone, newImageId)
                end
                
                -- Apply SpecialIndicator color
                if newColor then
                    applySpecialIndicatorColor(clone, newColor)
                end
            end
            
            clone.Parent = parentList
            
            -- Wait for the clone to be fully loaded
            if clone:IsA("GuiObject") then
                repeat
                    task.wait()
                until clone.AbsoluteSize.X > 0 and clone.AbsoluteSize.Y > 0
                print("Clone #" .. i .. " is now loaded and visible on screen")
            end
        end
        
        -- Refresh layout
        local layout = parentList:FindFirstChildOfClass("UIListLayout") or parentList:FindFirstChildOfClass("UIGridLayout")
        if layout then
            layout.Parent = nil
            task.wait()
            layout.Parent = parentList
        end
        
        statusLabel.Text = "Successfully cloned " .. amount .. " items!"
        statusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
    end)
end

-- Scan function
scanButton.MouseButton1Click:Connect(function()
    -- Clear previous items
    for _, child in pairs(scrollFrame:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    
    detectedItems = {}
    selectedButton = nil
    nameInput.Text = ""
    imageInput.Text = ""
    colorInput.Text = ""
    statusLabel.Text = "Scanning and refreshing models..."
    statusLabel.TextColor3 = Color3.fromRGB(255, 200, 100)
    
    -- Navigate to the path
    local success, menusPath = pcall(function()
        return playerGui:WaitForChild("Menus", 1)
    end)
    
    if not success then
        statusLabel.Text = "Error: Could not find Menus"
        statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        return
    end
    
    local backpackPath = menusPath:FindFirstChild("Backpack")
    if not backpackPath then
        statusLabel.Text = "Error: Could not find Backpack"
        statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        return
    end
    
    local mainPath = backpackPath:FindFirstChild("Main")
    local inventoryPath = mainPath and mainPath:FindFirstChild("Inventory")
    local contentPath = inventoryPath and inventoryPath:FindFirstChild("Content")
    local listPath = contentPath and contentPath:FindFirstChild("List")
    
    if not listPath then
        statusLabel.Text = "Error: Could not find List path"
        statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        return
    end
    
    -- Search for TextButtons and refresh their ViewportFrames
    local foundCount = 0
    for _, categoryContainer in pairs(listPath:GetChildren()) do
        if categoryContainer:IsA("Frame") and categoryContainer.Name == "CategoryContainer" then
            local innerList = categoryContainer:FindFirstChild("List")
            if innerList and innerList:IsA("Frame") then
                for _, child in pairs(innerList:GetChildren()) do
                    if child:IsA("TextButton") then
                        table.insert(detectedItems, child)
                        createItemButton(child.Name, child, innerList)
                        foundCount = foundCount + 1
                    end
                end
            end
        end
    end
    
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
    
    if foundCount > 0 then
        statusLabel.Text = "Found " .. foundCount .. " items! Click to select and edit."
        statusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
    else
        statusLabel.Text = "No items found"
        statusLabel.TextColor3 = Color3.fromRGB(255, 150, 100)
    end
end)

print("Item Cloner & Editor GUI loaded successfully!")

-- Predefined items for auto cloning
local autoClonePresets = {
    {
        name = "Friesian Horse (v1)",
        amount = 43,
        imageId = "rbxassetid://118211590630921",
        color = Color3.fromRGB(254, 243, 89)
    },
    {
        name = "Arabian Horse",
        amount = 21,
        imageId = "rbxassetid://72562595487232",
        color = Color3.fromRGB(106, 254, 250)
    },
    {
        name = "Arabian Horse",
        amount = 32,
        imageId = "rbxassetid://118973735898720",
        color = Color3.fromRGB(254, 87, 0)
    },
    {
        name = "Paint Horse (v1)",
        amount = 11,
        imageId = "rbxassetid://104180111511854",
        color = Color3.fromRGB(106, 254, 250)
    }
}

-- Auto Clone Random Items Function
autoCloneButton.MouseButton1Click
