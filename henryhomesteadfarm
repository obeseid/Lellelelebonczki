-- ✅ Follow Logic
local currentTask

local function followLoopFrom(folder)
	if currentTask then
		task.cancel(currentTask)
	end
	
	local players = game:GetService("Players")
	local lp = players.LocalPlayer
	local char = lp.Character or lp.CharacterAdded:Wait()
	local hrp = char:WaitForChild("HumanoidRootPart")
	local humanoid = char:WaitForChild("Humanoid")
	
	local function getValidTargets()
		local targets = {}
		for _, model in ipairs(folder:GetChildren()) do
			if model:IsA("Model") and model:FindFirstChild("HumanoidRootPart") and model:FindFirstChild("maneMesh") then
				table.insert(targets, model)
			end
		end
		return targets
	end
	
	currentTask = task.spawn(function()
		local currentTarget = nil
		local lastSwitch = 0
		
		while true do
			local now = tick()
			
			-- Switch target every 15 seconds or if lost
			if not currentTarget or not currentTarget.Parent or now - lastSwitch >= 15 then
				local targets = getValidTargets()
				if #targets > 0 then
					local newTarget
					repeat
						newTarget = targets[math.random(1, #targets)]
					until newTarget ~= currentTarget or #targets == 1
					
					currentTarget = newTarget
					lastSwitch = now
					
					local targetHRP = currentTarget:FindFirstChild("HumanoidRootPart")
					if targetHRP then
						hrp.CFrame = targetHRP.CFrame * CFrame.new(0, 0, -5)
					end
				end
			end
			
			-- Follow current target
			if currentTarget and currentTarget:FindFirstChild("HumanoidRootPart") then
				local targetHRP = currentTarget.HumanoidRootPart
				local distance = (hrp.Position - targetHRP.Position).Magnitude
				
				if distance > 6 then
					humanoid:MoveTo(targetHRP.Position + Vector3.new(0, 0, -4))
				end
				
				if distance > 30 then
					hrp.CFrame = targetHRP.CFrame * CFrame.new(0, 0, -4)
				end
			end
			
			task.wait(0.2)
		end
	end)
end

-- ✅ Auto-start scanning Mainland
followLoopFrom(workspace.Islands["Henry Homestead"])
